{
	"id": "86928fc4adc96df10951e57fa456be08",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/libraries/UnsafeMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Math functions that do not check inputs or outputs\r\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\r\nlibrary UnsafeMath {\r\n    /// @notice Returns ceil(x / y)\r\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\r\n    /// @param x The dividend\r\n    /// @param y The divisor\r\n    /// @return z The quotient, ceil(x / y)\r\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        assembly {\r\n            z := add(div(x, y), gt(mod(x, y), 0))\r\n        }\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 500
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/libraries/UnsafeMath.sol": {
				"UnsafeMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Math functions that do not check inputs or outputs",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/UnsafeMath.sol\":249:675  library UnsafeMath {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/UnsafeMath.sol\":249:675  library UnsafeMath {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205f86193abcfadbc4891b7cffa1a939960106acd6a63b59f425f4675b8a136d0564736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f86193abcfadbc4891b7cffa1a939960106acd6a63b59f425f4675b8a136d0564736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F DUP7 NOT GASPRICE 0xBC STATICCALL 0xDB 0xC4 DUP10 SHL PUSH29 0xFFA1A939960106ACD6A63B59F425F4675B8A136D0564736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "249:426:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f86193abcfadbc4891b7cffa1a939960106acd6a63b59f425f4675b8a136d0564736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F DUP7 NOT GASPRICE 0xBC STATICCALL 0xDB 0xC4 DUP10 SHL PUSH29 0xFFA1A939960106ACD6A63B59F425F4675B8A136D0564736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "249:426:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"divRoundingUp(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 249,
									"end": 675,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 249,
									"end": 675,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 249,
									"end": 675,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 249,
									"end": 675,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 249,
									"end": 675,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 249,
									"end": 675,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 249,
									"end": 675,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 249,
									"end": 675,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 249,
									"end": 675,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 249,
									"end": 675,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 249,
									"end": 675,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205f86193abcfadbc4891b7cffa1a939960106acd6a63b59f425f4675b8a136d0564736f6c63430007060033",
									".code": [
										{
											"begin": 249,
											"end": 675,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 249,
											"end": 675,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 249,
											"end": 675,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 249,
											"end": 675,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 249,
											"end": 675,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 249,
											"end": 675,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 249,
											"end": 675,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 249,
											"end": 675,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 249,
											"end": 675,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Math functions that do not check inputs or outputs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods that perform common math functions but do not do any overflow or underflow checks\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/UnsafeMath.sol\":\"UnsafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"contracts/libraries/UnsafeMath.sol\":{\"keccak256\":\"0x3c829e89e91323d9c3e0f15272baa9aa1d28291e7633ee4f1414774e6eca0a7d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f99f38de11092e98d43f1d14061fcfa7309a80ae93d2b7af99c9256c97312c23\",\"dweb:/ipfs/QmQXXUR1PhKUFVZXwwekW23YE9Zy7r3GvdtcDyc2nNTpSb\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods that perform common math functions but do not do any overflow or underflow checks",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/libraries/UnsafeMath.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/UnsafeMath.sol",
					"exportedSymbols": {
						"UnsafeMath": [
							15
						]
					},
					"id": 16,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "74:175:0",
								"text": "@title Math functions that do not check inputs or outputs\n @notice Contains methods that perform common math functions but do not do any overflow or underflow checks"
							},
							"fullyImplemented": true,
							"id": 15,
							"linearizedBaseContracts": [
								15
							],
							"name": "UnsafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 13,
										"nodeType": "Block",
										"src": "582:90:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "602:63:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "617:37:0",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "630:1:0"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "633:1:0"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "626:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "626:9:0"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "644:1:0"
																					},
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "647:1:0"
																					}
																				],
																				"functionName": {
																					"name": "mod",
																					"nodeType": "YulIdentifier",
																					"src": "640:3:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "640:9:0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "651:1:0",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "637:2:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "637:16:0"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "622:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "622:32:0"
															},
															"variableNames": [
																{
																	"name": "z",
																	"nodeType": "YulIdentifier",
																	"src": "617:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 5,
														"isOffset": false,
														"isSlot": false,
														"src": "630:1:0",
														"valueSize": 1
													},
													{
														"declaration": 5,
														"isOffset": false,
														"isSlot": false,
														"src": "644:1:0",
														"valueSize": 1
													},
													{
														"declaration": 7,
														"isOffset": false,
														"isSlot": false,
														"src": "633:1:0",
														"valueSize": 1
													},
													{
														"declaration": 7,
														"isOffset": false,
														"isSlot": false,
														"src": "647:1:0",
														"valueSize": 1
													},
													{
														"declaration": 10,
														"isOffset": false,
														"isSlot": false,
														"src": "617:1:0",
														"valueSize": 1
													}
												],
												"id": 12,
												"nodeType": "InlineAssembly",
												"src": "593:72:0"
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "275:222:0",
										"text": "@notice Returns ceil(x / y)\n @dev division by 0 has unspecified behavior, and must be checked externally\n @param x The dividend\n @param y The divisor\n @return z The quotient, ceil(x / y)"
									},
									"id": 14,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "divRoundingUp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "526:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "537:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "537:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "525:22:0"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "571:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 9,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "571:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "570:11:0"
									},
									"scope": 15,
									"src": "503:169:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 16,
							"src": "249:426:0"
						}
					],
					"src": "46:631:0"
				},
				"id": 0
			}
		}
	}
}